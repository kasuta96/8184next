// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  profile       Profile?
  status        Int        @default(0)
  role          Role       @default(USER)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  accounts      Account[]
  sessions      Session[]
  article       Article[]
  Vote          Vote[]
  Comment       Comment[]
  Reaction      Reaction[]
}

enum Role {
  USER
  MOD
  ADMIN
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Profile {
  id      Int    @id @default(autoincrement())
  info    Json
  setting Json
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String @unique
}

model Article {
  id          Int        @id @default(autoincrement())
  title       String
  slug        String?
  content     Json
  published   Boolean    @default(false)
  status      Int        @default(0)
  author      User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId    String
  description String?    @db.Text
  thumbnail   String?    @db.VarChar(255)
  tags        String?    @db.VarChar(255)
  point       Int        @default(0)
  sticker     Json?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  category    Category[]

  vote     Vote[]
  comment  Comment[]
  reaction Reaction[]
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String
  description String?   @db.Text
  keyword     Json?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  article     Article[]
}

model Vote {
  id        Int      @id @default(autoincrement())
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  article   Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId Int
  level     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id        Int      @id @default(autoincrement())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  articleId Int
  article   Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  content   String   @db.Text
  comment   Comment? @relation("CommentToComment")
  parentId  Int?     @unique
  parent    Comment? @relation("CommentToComment", fields: [parentId], onDelete: Cascade, references: [id])
  status    Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Reaction_type {
  id       Int        @id @default(autoincrement())
  name     String
  icon     String
  data     Json?
  reaction Reaction[]
}

model Reaction {
  id        Int           @id @default(autoincrement())
  userId    String
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  commentId Int
  comment   Article       @relation(fields: [commentId], references: [id], onDelete: Cascade)
  typeId    Int
  type      Reaction_type @relation(fields: [typeId], references: [id], onDelete: Restrict)
}
