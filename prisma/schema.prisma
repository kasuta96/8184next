// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialActions"]
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  password      String?    @db.VarChar(255)
  articles      Article[]
  profile       Profile?
  status        Int        @default(0)
  Vote          Vote[]
  Comment       Comment[]
  Reaction      Reaction[]
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Profile {
  id       Int    @id @default(autoincrement())
  info     Json
  settings Json
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String @unique
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  keywords    Json?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  Article     Article[]
}

model Article {
  id          Int        @id @default(autoincrement())
  title       String
  slug        String?
  content     Json
  published   Boolean    @default(false)
  status      Int        @default(0)
  author      User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId    String
  category    Category?  @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  categoryId  Int?
  description String?    @db.Text
  thumbnail   String?    @db.VarChar(255)
  tags        String?    @db.VarChar(255)
  point       Int        @default(0)
  stickers    Json?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  Vote        Vote[]
  Comment     Comment[]
  Reaction    Reaction[]
}

model Vote {
  id        Int      @id @default(autoincrement())
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  article   Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId Int
  level     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id        Int       @id @default(autoincrement())
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  articleId Int
  article   Article   @relation(fields: [articleId], references: [id], onDelete: Cascade)
  content   String
  parentId  Int?
  parent    Comment?  @relation(fields: [parentId], references: [id], onDelete: Cascade)
  status    Int       @default(0)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Comment   Comment[] @relation("CommentToComment")
}

model Reaction_type {
  id       Int        @id @default(autoincrement())
  name     String
  icon     String
  data     Json?
  Reaction Reaction[]
}

model Reaction {
  id        Int           @id @default(autoincrement())
  userId    String
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  commentId Int
  comment   Article       @relation(fields: [commentId], references: [id], onDelete: Cascade)
  typeId    Int
  type      Reaction_type @relation(fields: [typeId], references: [id], onDelete: Restrict)
}
